error <- qt(0.95,df=8)*se
-3-1-error
error <- qt(0.95,df=17)*se
-3-1-error
error <- qt(0.95,df=18)*se
-3-1-error
error <- qt(0.95,df=8)*se
-3-1-error
-3-1+error
error <- qt(0.95,df=17)*se
-3-1+error
error <- qt(0.975,df=17)*se
-3-1+error
error <- qt(0.975,df=8)*se
-3-1+error
se <- sqrt(1.8**2/9+1.5**2/9)
1.8**2
3.24/9
sqrt(36*2)
se
sqrt(0.36*2)
se = sqrt(30**2/9)
error <- qt(0.975,df=8)*se
1100-error
se <- sqrt(1.8**2/9+1.5**2/9)
error <- qt(0.95,df=16)*se
-3-1+error
help(t.test)
x = c(9.0,9.5,9.6,10.2,11.6)y=c(9.9,8.7,9.8,10.5,8.9,8.3,9.8,9.0)
> t.test(x,y)
x = c(140,138,150,148,135)
y <- c(132,135,151,146,130)
t.test(x,y,paired = TRUE)
binom.test(c(300, 100), p = 0.5,
alternative = c("one.sided", "greater"),
conf.level = 0.95)$p.value
binom.test(c(300, 100), p = 0.5,
alternative = "greater",
conf.level = 0.95)$p.value
binom.test(c(300, 100), p = 0.5,
alternative = "less",
conf.level = 0.95)$p.value
binom.test(c(3, 1), p = 0.5,
alternative = "less",
conf.level = 0.95)$p.value
binom.test(c(3, 1), p = 0.5,
alternative = "greater",
conf.level = 0.95)$p.value
binom.test(c(10, 1777), p = 0.01,
alternative = "greater",
conf.level = 0.95)$p.value
binom.test(c(10, 1777), p = 0.01,
alternative = "less",
conf.level = 0.95)$p.value
se <- sqrt(1.8**2/9+1.5**2/9)
error <- qt(0.95,df=16)*se
t <- -5/se
2*pt(-abs(t),df=16)
t <- -4/se
2*pt(-abs(t),df=16)
a <- 0.01
s <- 0.04
n <- 100
error <- qnorm(0.975)*s/sqrt(n)
left <- a-error
right <- a+error
error <- qt(0.975,df=n-1)*s/sqrt(n)
left <- a-error
right <- a+error
se = s/sqrt(n)
left <- left/se
right <- right/se
p <- pt(right,df=n-1)-pt(left,df=n-1)
p
1-p
power.t.test(n=100, delta = .01, sd = .04, type = "one.sample", alt = "one.sided")$power
power.t.test(power = .9, delta = .01, sd = .04, type="one.sample", alt="one.sided")$n
rexp(10, 0.2)
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
hist(rexp(1000,0.2))
hist(rexp(10000,0.2))
mns = NULL
for (i in 1 : 10000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
mean(rexp(10000,0.2))
hist(rexp(10000,0.2))
hist(rexp(1000,0.2))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
mean(rexp(1000,0.2))
library(swirl)
install_from_swirl("Statistical Inference")
swirl()
hist(runif(1000))
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(runif(40)))
hist(mns)
mns
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(msn)
hist(mns)
mns = NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(40,0.2)))
hist(mns)
library(ggplot2)
ggplot(mns, aes(x=mns)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mns, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
df = data.frame(expo = rexp(1000, lambda))
lambda = 0.2
df = data.frame(expo = rexp(1000, lambda))
ggplot(df, aes(x=mns)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(mns, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=expo)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(expo, na.rm=T)),   # Ignore NA values for mean
color="red", linetype="dashed", size=1)
mean(df$expo)
ggplot(df, aes(x=expo)) + geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(expo)),
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=expo)) + geom_histogram(binwidth=.5, colour="black", fill="white") +geom_vline(aes(xintercept=mean(expo)),
color="red", linetype="dashed", size=1)
ggplot(df, aes(x=expo)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(expo)), color="red", linetype="dashed", size=1)
ggplot(df, aes(x=expo)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_vline(aes(xintercept=mean(expo)), color="red", linetype="dashed", size=1) +
geom_density(alpha=.2, fill="#FF6666")
ggplot(df, aes(x=expo)) +
geom_histogram(binwidth=.5, colour="black", fill="white") +
geom_density(alpha=.2, fill="#FF6666")
for (i in 1 : 1000) df$expo = c(df$expo, mean(rexp(40, lambda)))
df = data.frame(expo = NULL)
for (i in 1 : 1000) df$expo = c(df$expo, mean(rexp(40, lambda)))
df
df = data.frame(expo = NULL)
df
df = data.frame(expo = mean(rexp(40, lambda))
)
df
df = data.frame(expo = mean(rexp(40, lambda)))
for (i in 2 : 1000) df$expo = c(df$expo, mean(rexp(40, lambda)))
df = data.frame(expo = mean(rexp(40, lambda)))
for (i in 2 : 1000) df <- rbind(df, mean(rexp(40, lambda)))
df
df = data.frame(expmean = mean(rexp(40, lambda)))
for (i in 2 : 1000) df <- rbind(df, mean(rexp(40, lambda)))
lambda = 0.2
df = data.frame(expmean = mean(rexp(40, lambda)))
for (i in 2 : 1000) df <- rbind(df, mean(rexp(40, lambda)))
var
var(df$expmean)
var(df$expmean)*1000/999
set.seed(18532)
sample.size <- 40
num.trials <- 1000
lambda <- 0.2
data <- matrix(data=NA,nrow=0,ncol=sample.size)
for (i in 1:num.trials) {
data <- rbind(data, rexp(sample.size, lambda))
}
data
head(data)
length(data[1])
length(data)
length(data[,1])
sample.means <- c(1:num.trials)
for (j in 1:num.trials) {
sample.means[j] <- mean(data[j,])
}
sample.means
all.data <- as.vector(data)
head(all.data)
length(all.data)
variance <- var(all.data)
variance
unbiased.variance <- variance * num.trials/(num.trials-1)
unbiased.variance
df = data.frame(expvar = var(rexp(40, lambda)))
for (i in 2 : 1000) df <- rbind(df, var(rexp(40, lambda)))
hist(df$expvar)
mean(df$expvar)
df = data.frame(expvar = var(rexp(400, lambda)))
for (i in 2 : 10000) df <- rbind(df, var(rexp(400, lambda)))
hist(df$expvar)
mean(df$expvar)
25/40
library(datasets)
df <- data.frame(ToothGrowth)
str(df)
head(df)
split(df$len, df$supp)
df1 = dataframe(split(df$len, df$supp))
df1 = data.frame(split(df$len, df$supp))
df1
df.len = data.frame(split(df$len, df$supp))
df.dose = data.frame(split(df$len, df$dose))
df.dose
split(df$len, df$dose)
split(df, df$dose)
split(df, df$supp)
df.len = split(df, df$supp)
df.len$VC$len
df.len$OJ$len
df.len = data.frame(split(df, df$supp))
df.len$VC
df.len$VC$len
df.len
str(df.len)
head(df.len)
ggplot(data=df.len, aes(x=OJ.dose, y=OJ.len)) +
geom_boxplot(aes(fill=OJ.dose), outlier.colour = "green", outlier.size = 3) +
labs(title="OJ Dose V/S Tooth Length", x="OJ Dose", y="Tooth Length")
library(ggplot2)
library(ggplot2)
ggplot(data=df.len, aes(x=OJ.dose, y=OJ.len)) +
geom_boxplot(aes(fill=OJ.dose), outlier.colour = "green", outlier.size = 3) +
labs(title="OJ Dose V/S Tooth Length", x="OJ Dose", y="Tooth Length")
ggplot(data=df, aes(x=supp, y=len)) +
geom_boxplot(aes(fill=supp), outlier.colour = "green", outlier.size = 3) +
labs(title="Supplementary Type V/S Tooth Length", x="Supplementary", y="Tooth Length")
Oj.dose
ggplot(data=df.len, aes(x=VC.dose, y=VC.len)) +
geom_boxplot(aes(fill=VC.dose), outlier.colour = "green", outlier.size = 3) +
labs(title="VC Dose V/S Tooth Length", x="VC Dose", y="Tooth Length")
ggplot(data=df.len, aes(x=VC.dose, y=VC.len))
ggplot(data=df.len, aes(x=VC.dose, y=VC.len)) + geom_boxplot()
ggplot(data=df, aes(x=dose, y=len)) + geom_boxplot(aes(fill=factor(dose)), outlier.colour = "green", outlier.size = 3) + labs(title="Plot of Dose Quantity vs Tooth Length", x="Dose Quantity", y="Tooth Length")
ggplot(data=df.len, aes(x=OJ.dose, y=OJ.len)) + geom_boxplot(aes(fill=factor(OJ.dose)), outlier.colour = "green", outlier.size = 3) + labs(title="Plot of Dose Quantity vs Tooth Length", x="Dose Quantity", y="Tooth Length")
head(df.len)
t.test(df.len$VC.len, df.len$OJ.len, paired=FALSE, var.equal=FALSE)
t.test(df.len$VC.len, df.len$OJ.len, paired=FALSE, var.equal=FALSE, one.sided = TRUE)
?t.test
t.test(df.len$VC.len, df.len$OJ.len, paired=FALSE, var.equal=FALSE, alternative = "less")
t.test(df.len$VC.len, df.len$OJ.len, paired=FALSE, var.equal=FALSE, alternative = "greater")
t.test(df.len$VC.len, df.len$OJ.len, paired=FALSE, var.equal=FALSE, alternative = "less")
library("swirl")
swirl()
library(swirl)
swirl()
3.5
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
0.5*(edh+edl)
sqrt(2)
integrate(myfunc,0,2)
spop
mean(spop)
allsam
apply(allsam, mean)
apply(allsam, 1, mean)
mean(smeans)
dice_sqr
ex2_fair <- sum(dice_sqr*dice_fair)
ex2_fair - 3.5**2
sum(dice_sqr*dice_high) * 3.5**2
sum(dice_sqr*dice_high) - edh**2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
matrix(runif(10000),1000)
sd(apply(matrix(runif(10000),1000),1,mean))
sd(apply(matrix(rpois(4, 10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000, 4),1000),1,mean))
1/2/sqrt(10)
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
choose(5,3) * 0.8^3 * (1-0.8)^(5-3) + choose(5,4) * 0.8^3 * (1-0.8)^(5-4) + choose(5,5) * 0.8^3 * (1-0.8)^(5-5)
choose(5,3) * 0.8^3 * 0.2^(5-3) + choose(5,4) * 0.8^3 * 0.2^(5-4) + choose(5,5) * 0.8^3 * 0.2^(5-5)
choose(5,3) * 0.8^3 * 0.2^(5-3) + choose(5,4) * 0.8^4 * 0.2^1 + choose(5,5) * 0.8^5 * 0.2^0
pbinom(2, 5, prob = 0.8, lower.tail=FALSE)
qnorm(10)
qnorm(0.1)
0
3+2*qnorm(0.975)
qnorm(.975,mean=3,sd=2)
3+2*qnorm(0.975)
1.96*2 + 3
pnorm(1200, mean=1020, sd=50)
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm(1200,mean=1020,sd=50,lower.tail=FALSE)
pnorm((1200-1020)/50,lower.tail=FALSE)
qnorm(0.75, mean=1020, sd=50)
0.53
0.53
ppois(3, mean=2.5*4)
ppois(3, lambda=2.5*4)
ppois(5, lambda=0.01*1000)
pbinom(5,1000,prob = 0.01)
ppois(5, lambda=0.01*1000)
ppois(5, 0.01*1000)
ppois(5, 1000*0.01)
10
coinPlot(10)
coinPlot(10000)
qnorm(0.975)
qnorm(0.95)
4
0.6 + c(-1,1)*qnorm(0.975)*sqrt(0.6*0.4/100)
4
binom.test(60,100)$conf.int
1
mywald(0.2)
ACCompar(20)
lamb = 5/94.32
lamb <- 5/94.32
4
lamb +c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
4
poisson.test(5,94.32)$conf
swirl()
library()
library(swirl)
swirl()
library(swirl)
swirl()
head(pValues)
sum(pValues[pValues < 0.05])
sum(pValues < 0.05)
1
sum(p.adjust(pValues,method="bonferroni") < 0.05)
sum(p.adjust(pValues,method="BH") < 0.05)
tail(trueStatus)
1
table(pValues2 < 0.05, trueStatus)
24/476*100
24/500*100
24/500
table(p.adjust(pValues,method="BH") < 0.05, trueStatus)
table(p.adjust(pValues,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="bonferroni") < 0.05, trueStatus)
table(p.adjust(pValues2,method="BH") < 0.05, trueStatus)
library("swirl")
swirl()
3.5
print(g2)
lybrary(swirl)
library(swirl)
swirl()
head(sh)
nh
median(sh)
median(resampledMedians)
median(sh)
1
sam <- sample(fh,nh*B,replace=TRUE)
1
resam <- matrix(sam,B,nh)
head(sam)
meds <- apply(resam,1,median)
median(sf) - median(meds)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
1
quantile(resampledMedians,c(.025,.975))
1
quantile(meds,c(.025,.975))
dim(InsectSprays)
names(InsectSprays)
1
head(InsectSprays)
summary(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCcounts
group
testStat
1
obs <- testStat(BCcounts,group)
obs
1
mean(Bdata$count)-mean(Cdata$count)
1
sample(group)
1
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
perms > obs
mean(perms>obs)
1
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
q()
library(swirl)
swirl()
install_from_swirl("Regression Models")
library(swirl)
swirl()
1
fit <- lm(child ~ parent, galton)
summary(fit)
fit$residuals
mean(fit$residuals)
cov(fit$residuals,galton$parent)
data(mtcars)
data <- mtcars
data$am <- as.factor(data$am)
levels(data$am) <- c("Automatic", "Manual")
fit <- lm(mpg~factor(am) - 1, data = data); coef(fit)
mfit <- lm(mpg~am + wt + cyl + disp + hp -1, data = data); coef(mfit)
p.value(anova(fit, mfit))
anova(fit, mfit)
anova(fit, mfit)$Pr
library(caret)
install.packages("caret")
library(caret)
library(kernlab)
install.packages("kernlab")
library(kernlab)
data(spam)
head(spam)
inTrain <- createDataPartition(y=spam$type, p = 0.75, list=FALSE)
training<-spam[inTrain]
inTrain
head(inTrain)
testing <- spam[-inTrain,]
training<-spam[inTrain,]
training
testing
# Download data.
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_dest_training <- "pml-training.csv"
#download.file(url=url_raw_training, destfile=file_dest_training, method="curl")
url_raw_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_dest_testing <- "pml-testing.csv"
#download.file(url=url_raw_testing, destfile=file_dest_testing, method="curl")
# Import the data treating empty values as NA.
df_training <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(df_training)
df_testing <- read.csv(file_dest_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(df_testing)
# Verify that the column names (excluding classe and problem_id) are identical in the training and test set.
all.equal(colnames_train[1:length(colnames_train)-1], colnames_test[1:length(colnames_train)-1])
# Download data.
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_dest_training <- "pml-training.csv"
#download.file(url=url_raw_training, destfile=file_dest_training, method="curl")
url_raw_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_dest_testing <- "pml-testing.csv"
#download.file(url=url_raw_testing, destfile=file_dest_testing, method="curl")
# Import the data treating empty values as NA.
df_training <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(df_training)
df_testing <- read.csv(file_dest_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(df_testing)
# Verify that the column names (excluding classe and problem_id) are identical in the training and test set.all.equal(colnames_train[1:length(colnames_train)-1], colnames_test[1:length(colnames_train)-1])
# Download data.
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
file_dest_training <- "pml-training.csv"
#download.file(url=url_raw_training, destfile=file_dest_training, method="curl")
url_raw_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_dest_testing <- "pml-testing.csv"
#download.file(url=url_raw_testing, destfile=file_dest_testing, method="curl")
# Import the data treating empty values as NA.
df_training <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(df_training)
df_testing <- read.csv(file_dest_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(df_testing)
# Verify that the column names (excluding classe and problem_id) are identical in the training and test set.all.equal(colnames_train[1:length(colnames_train)-1], colnames_test[1:length(colnames_train)-1])
url_raw_training <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url_raw_training
url_raw_testing
df_training <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
url_raw_testing <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
file_dest_testing
getwd()
setwd("C:/Users/Toshiba/Desktop/PracticalMachineLearning/")
download.file(url=url_raw_training, destfile=file_dest_training, method="curl")
download.file(url=url_raw_testing, destfile=file_dest_testing, method="curl")
df_training <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(df_training)
df_testing <- read.csv(file_dest_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(df_testing)
df_training <- read.csv(file_dest_training, na.strings=c("NA",""), header=TRUE)
colnames_train <- colnames(df_training)
df_testing <- read.csv(file_dest_testing, na.strings=c("NA",""), header=TRUE)
colnames_test <- colnames(df_testing)
head(colnames_train)
colnames_train
head(df_testing)
all.equal(colnames_train[1:length(colnames_train)-1], colnames_test[1:length(colnames_train)-1])
library(caret)
install.packages("rpart")
install.packages("rpart.plot")
install.packages("randomForest")
install.packages("corrplot")
summary(train)
str(train)
trainUrl <-"https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
testUrl <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
trainFile <- "pml-training.csv"
testFile  <- "pml-testing.csv"
if (!file.exists(trainFile)) {
download.file(trainUrl, destfile=trainFile, method="curl")
}
if (!file.exists(testFile)) {
download.file(testUrl, destfile=testFile, method="curl")
}
train <- read.csv("pml-training.csv")
test <- read.csv("pml-testing.csv")
summary(train)
summary(test)
head(str(train))
